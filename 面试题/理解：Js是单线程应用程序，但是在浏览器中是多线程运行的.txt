从 JS Event Loop 机制看 Vue 中 nextTick 的实现原理：https://blog.csdn.net/GitChat/article/details/78620850

单线程：是指在 JS 引擎中负责解释和执行 JavaScript 代码的线程只有一个。JS 运行在浏览器中，是单线程的，每个 window 一个 JS 线程。
    
        第一个问题，为啥要是单线程，多线程不好吗？减轻 cpu 的压力。现在如果有两个线程，一个线程修改页面某一个 dom 元素，正巧另一个线程将这个元素给删除了。这不是混乱了么。所以单线程是有原因的。
        那你又有疑问了，既然是单线程的，在某个特定的时刻只有特定的代码能够被执行，并阻塞其它的代码。
        那不行啊，我们总不能一直等着啊，前端需要调用后端接口取数据，这个过程是需要响应时间的，那执行这个代码的时候浏览器也等着？答案是否定的。

        其实还有其他很多类线程（应该叫做任务队列），比如进行ajax请求、监控用户事件、定时器、读写文件的线程（例如在NodeJS中）等等。
        这些我们称之为异步事件，当异步事件发生时，将他们放入执行队列，等待当前代码执行完成。就不会长时间阻塞主线程。

        等主线程的代码执行完毕，然后再读取任务队列，返回主线程继续处理。如此循环这就是事件循环机制。

js的循环机制、宏观任务与微观任务：https://blog.csdn.net/weixin_45658814/article/details/108101284
    宏任务：script(整体代码)、setTimeout()、setInterval()、postMessage、I/O 、UI交互事件
    微任务:new Promise()、new Promise().then(回调)、MutationObserver(html5 新特性)
        console.log('1')
        setTimeout(()=>console.log(2))
        setTimeout(()=>console.log(3),0)
        new Promise(resolve=>{
            console.log(4)
            resolve(5);
            setTimeout(()=>{
                console.log(6)
            })
        }).then((res)=>{
            console.log(res,':7')
        })
        console.log('结束8')
        //1，4，8，5:7，2，3，6
Js是单线程应用程序，但是在浏览器中是多线程运行的：浏览器的内核是多线程的，它们在内核制控下相互配合以保持同步，一个浏览器至少实现三个常驻线程：
        javascript引擎线程是基于事件驱动单线程执行的，JS引擎一直等待着任务队列中任务的到来，然后加以处理，浏览器无论什么时候都只有一个JS线程在运行JS程序。

        GUI渲染线程负责渲染浏览器界面，当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时,该线程就会执行。但需要注意 GUI渲染线程与JS引擎是互斥的，
        当JS引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。

        事件触发线程，当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。
        这些事件可来自JavaScript引擎当前执行的代码块如setTimeOut、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，
        但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。（当线程中没有执行任何同步代码的前提下才会执行异步代码）
        js的单线程在这一段面试代码中尤为明显（理解即可，请不要尝试...浏览器会假死的）：
            var isEnd = true;
             setTimeout(function () {
                isEnd = false;//1s后，改变isEnd的值         
            }, 1000);     
            while (isEnd); //while永远占用了js线程，所以setTimeout里面的函数永远不会执行
            alert('end'); //alert也永远不会弹出  
在我工作中对js的认识，个人认为js的任务单位是函数。
        即，一个函数表示着一个任务，这个函数没有执行结束，则在浏览器中当前的任务即没有结束。
        上面的代码中，当前任务因为while的执行而造成永远无法执行，所以后面的setTimeout也永远不会被执行。

