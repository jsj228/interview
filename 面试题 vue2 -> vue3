vue2->vue3的迁移策略：https://v3.cn.vuejs.org/guide/migration/array-refs.html#%E8%BF%81%E7%A7%BB%E7%AD%96%E7%95%A5
3.x 语法中要想在数组被改变时触发侦听回调，必须指定 deep 选项
      watch: {
        bookList: {
          handler(val, oldVal) {    console.log('book list changed')},
          deep: true
        },
      }
      
https://router.vuejs.org/zh/introduction.html

一、main.js中初始化
      import {createApp} from 'vue'
      import App from './App.vue'
      import I18n from './i18n'
      import router from './router'
      //项目中没有用到
      import store from './store/index.js'
      import Vuex from 'vuex'

      import ElementPlus from 'element-plus'
      import 'element-plus/dist/index.css'
      import axios from 'axios'

      const app = Vue3.createApp(App)
      app.config.globalProperties.$axios = axios
      app.config.globalProperties.GLOBAL = {}
      //挂载前需要分别初始化 路由、I18n、ElementPlus、Vuex等
      app.use(router).use(I18n).use(ElementPlus).use(Vuex).mount('#app')
      
二、vue3 路由的使用：    https://blog.csdn.net/weixin_42063951/article/details/117357542
    案例操作：https://codesandbox.io/s/nested-named-views-vue-router-4-examples-re9yl?initialpath=/settings/emails&file=/src/main.js
    1、在app.vue中 
            vue2中：    <keep-alive>      <router-view />    </keep-alive>
            vue3中：    <router-view v-slot="{Component}"> <component is="Component"/> </keep-alive> <router-view />   
    2、在main.js中初始化 app.use(router).use(I18n).use(ElementPlus).use(Vuex).mount('#app')     
    3、在router.js中处理路由
      import { createRouter, createWebHashHistory } from 'vue-router'
      const routes = [{path: '/',name: 'A',component: '../views/A.vue'},{path: '/B',name: 'B',component: '../views/B.vue'}]
      const appRrouter = createRouter({history: createWebHashHistory(),routes })
      export default appRrouter
    4、this.$router.replace('/profitDashboard');
       this.$router.go(n) 前进：向前（n>0）移动n条记录;if n===1 与 this.$router.forward() 相同
                    后退:向后（<0）移动n条记录   if n===-1 与 this.$router.back() 相同  
       this.$router.push  替换 router.push({ path: '/home', replace: true })  相当于this.$router.replace({ path: '/home' })
                    const username = 'eduardo'  // 我们可以手动建立 url，但我们必须自己处理编码
                    this.$router.push(`/user/${username}`) // -> /user/eduardo
                    this.$router.push({ path: `/user/${username}` }) // -> /user/eduardo
                    // 如果可能的话，使用 `name` 和 `params` 从自动 URL 编码中获益
                    this.$router.push({ name: 'user', params: { username } }) // -> /user/eduardo
                    // `params` 不能与 `path` 一起使用
                    this.$router.push({ path: '/user', params: { username } }) // -> /user
                    或者：
                    this.$router.push({ path: '/register', query: { plan: 'private' } })
   5、路由守卫:在router.js中处理  https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%8F%AF%E9%80%89%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0-next
      改变路由beforeEach beforeResolve
      afterEach不改变路由、不会接受 next 函数 
         ①前置守卫 to:要去那个页面,from：要离开的页面，netx()至少执行一次
                  appRrouter.beforeEach((to, from, next) => {   //
                    if (to.name !== 'Login' && !isAuthenticated) next({ name: 'Login' }) // 如果用户未能验证身份，则 `next` 会被调用两次
                    next()
                  })
         ②全局解析守卫：appRrouter.beforeResolve(async to => {
                          if (to.meta.requiresCamera) {
                            try {await askForCameraPermission()} 
                            catch (error) {
                            // ... 处理错误，然后取消导航
                            if (error instanceof NotAllowedError) {return false } 
                            else { throw error} // 意料之外的错误，取消导航并把错误传给全局处理器
                            }
                          }
                        })
     
       ③在router.js中处理：
            failure 用来检测导航故障  https://router.vuejs.org/zh/guide/advanced/navigation-failures.html#%E6%A3%80%E6%B5%8B%E5%AF%BC%E8%88%AA%E6%95%85%E9%9A%9C
            appRrouter.afterEach((to, from, failure) => {if (!failure) sendToAnalytics(to.fullPath) })
          页面中使用：
            import { NavigationFailureType, isNavigationFailure } from 'vue-router'
            // 试图离开未保存的编辑文本界面
            const failure = await router.push('/articles/2')
            if (isNavigationFailure(failure, NavigationFailureType.aborted)) {
              // 给用户显示一个小通知
              showToast('You have unsaved changes, discard and leave anyway?')
            }
      ④ 独享路由守卫：beforeEnter
            const routes = [{path: '/users/:id',component: UserDetails,beforeEnter: (to, from) => {return false },// reject the navigation
              }]
     
           
      

