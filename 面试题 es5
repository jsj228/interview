【重点】微观和宏观任务
    微观任务：new Promise(fn) --->fn中遇到resolve()就启动了宏观任务promise.then()
    宏观任务：异步请求、setTimeout、setInterval,promise.then()等；
    练习：
        const promise = new Promise((resolve, reject) => {
          console.log(1);  resolve(5);console.log(2);
        }).then(val => { console.log(val);});
        promise.then(() => {console.log(3);});
        console.log(4);
        setTimeout(function() {console.log(6);},100);
【重点】浏览器的事件循环机制  http://lynnelv.github.io/js-event-loop-browser       
        步骤一： 从<script>代码开始，到</script>代码结束，按顺序执行所有的代码。
        步骤二： 在步骤一顺序执行代码的过程中，如果遇到同步任务，立即执行，然后继续执行后续代码；如果遇到异步任务，将异步任务交给对应的模块处理
        （事件交给事件处理线程，ajax交给异步HTTP请求线程），当异步任务到达触发条件以后将异步任务的回调函数推入任务队列（宏任务推入宏任务队列，微任务推入微任务队列）。
        步骤三：步骤一结束后，说明同步代码执行完毕。此时读取并执行微任务队列中保存的所有的微任务。
        步骤四： 步骤三完成后读取并执行宏任务队列中的宏任务，每执行完一个宏任务就去查看微任务队列中是否有新增的微任务，如果存在则重复步骤三；如果不存在，继续执行下一个宏任务，直到。
        
        微观先执行完----->再执行事件堆中的一个个宏观任务-->宏观任务中有微观任务
             ↓                   ↓                               ↓
             ↓                无微任务                      执行微观任务 
             ↓                   ↓                              ↓   
             ↓                跟新视图  ←------------------- 无微任务
        在堆添加一个个宏观任务                          
        详情：https://www.cnblogs.com/HouJiao/p/14385461.html                 
【重点】、数据类型
    数据分为基本数据类型和引用数据类型（Object、数组、fn、日期等）。
    1、基本数据类型的特点：数据直接存储在栈(stack);  (String, Number, Boolean, Null, Undefined，Symbol)；
    基本数据类型的变量与变量之间是独立存在，修改其中一个变量，不会影响其他变量
    2、引用数据类型的特点：存储的是该对象在栈中引用，真实的数据存放在堆内存里；(Object)
    当copy数据时，copy到的是保存数据的内存地址而不是数据值本身。当两个变量保存的是同一个引用数据对象，则其中一个变量的属性发生改变，另一个变量也会随之变化。
    引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。
    当比较数据时：基本数据比较的是数据值的大小；而引用型数据比较的是保存数据的内存地址——若两个变量的数据一模一样，但内存地址不同，则会返回false。
1.2数组的操作：
    ① array.splice
        删除数组中指定的元素：array.splice(位置,删除几个)   返回值为删除内容，array为结果值
        插入功能数组中指定的位置： array.splice(位置,0,插入的项)  返回值为空数组，array值为最终结果值
        替换数组中的某一项：array.splice(起始位置,删除的项数,插入的项) 返回值为删除内容，array为结果值
    ② array.pop('i')从头添加数据; 
    ③ array.push('i')从尾部添加数据 
    ③ array.join('分割符') 将数组的元素组起一个字符串 
    ③ array.toLocaleString()、array.toString()：将数组转换为字符串
    ③ array.shift() 删除原数组第一项 并返回删除元素的值；如果数组为空则返回undefined 。
    ③ array.unshift() 将参数添加到原数组开头，并返回数组的长度 
    ③ array.sort() 按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。
    ③ array.reverse() 反转数组项的顺序。
    ③ array.concat(9,[1,2],...) 将参数添加到原数组中。
    ③ array.indexOf('要查找的项',（可选的）表示查找起点位置的索引) 
    ③ array.includes('要查找的项') 判断一个数组是否包含一个指定的值 返回true/false
    ③ array.lastIndexOf('要查找的项',（可选的）从数组的末尾开始向前查找)
    ③ array.every(fn(item,i){return item<3 })判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true
    ③ array.some(fn(item,i){return item<3 }) 判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true
   
    ③ array.forEach(fn(item,i){console.log(item,i)}) 循环数组
    ③ array.map(fn(item){return item}) 循环数组（ 指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组）可以返回单项
    ③ array.filter(fn(item,i){return item%3 })过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组

       
        
【重点】获取对象的原型  ①.Object.getPrototypeOf({a:1})    ②.let obj={a:1}; obj.__proto__     ③.对象.prototype
【重点】判断数据类型  ①、 typeof    ②、constructor      ③、ininstanceof    ④.Object.prototype.toString.call(123)
    ②、constructor  
    ③、ininstanceof 该方法适合一些条件选择或分支
        [1,21] instanceof Array     // true
        new Date() instanceof Date  // true
    ④.Object.prototype.toString.call(123)  Object.prototype.toString.call(new Date()) //'[object Date]'
    function gettype(obj) {
      var type = typeof obj;
      if (type !== 'object') return type;//如果不是object类型的数据，直接用typeof就能判断出来
      //如果是object类型数据，准确判断类型必须使用Object.prototype.toString.call(obj)的方式才能判断
      return Object.prototype.toString.call(obj).replace(/^\[object (\S+)\]$/, '$1');
    }
【重点】HTTP和HTTPS的区别  
    （1）http: 超文本传输协议，是互联网上广泛的一种网络协议，是一个用户客户端和服务端请求和应答的标准（TCP）,
        用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少
    （2）https： 一安全为目标的HTTP通道，在http下加入了SSL层。SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密
    （3）https协议需要申请证书，一般免费证书比较少，所以需要一定的费用
    http是超文本传输协议，信息是明文传输。https则是具有安全性的ssl加密传输TLS协议   https://www.cnblogs.com/xingzc/p/6068673.html
    http和https使用的是完全不相同的两种连接方式，用的端口也不一样，http是80端口，https是443端口，所以一般安全级别比较高的服务都为采用https协议来进行信息加密避免敏感信息泄露    
【重点】浏览器是如何渲染页面的
    （1）从浏览器地址栏的请求链接开始
    （2）浏览器通过DNS解析查到域名映射的IP地址
    （3）成功之后浏览器端向此IP地址取得连接
    （4）成功连接之后，浏览器端将请求头信息 通过HTTP协议向此IP地址所在服务器发起请求
    （5）服务器接受到请求之后等待处理，最后向浏览器端发回响应
    （6）此时在HTTP协议下，浏览器从服务器接收到 text/html类型的代码
    （7）浏览器开始显示此html，并获取其中内嵌资源地址
    （8）然后浏览器再发起请求来获取这些资源，并在浏览器的html中显示
【重点】.跨域问题
      （1）跨域问题是如何产生的：浏览器的同源安全的策略，使得   协议不同、域名、子域名、端口 有一种不相同时，会出现跨域
      （2）怎吗结局跨域问题 
        a.JSONP 解决get跨域问题
            JSONP跨域实现：https://blog.csdn.net/badmoonc/article/details/82289252
            var c=document.createElement('script');
            c.src="http://....../接口名?参数1=''&参数2=''&callback=fn";
            $('body').append(c);
            function fn(res){console.log(res)}
        b.webpack   本地配置代理服务，解决跨域 https://www.cnblogs.com/zishang91/p/8909900.html，
        c.生产后:后端服务（nginx）的反向代理接口跨域
        d.后端开启Cross-Origin Resource Sharing（CORS）即可 ， 设置Access-Control-Allow-Origin=true
            跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，是 JSONP 模式的现代版。
            与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。用 CORS 可以让网页设计师用一般的 XMLHttpRequest，这种方式的错误处理比 JSONP 要来的好。
            另一方面，JSONP 可以在不支持 CORS 的老旧浏览器上运作。现代的浏览器都支持 CORS。
          app.post('/cors', function(req, res) {
            res.header("Access-Control-Allow-Origin", "*"); //设置请求来源不受限制
            res.header("Access-Control-Allow-Headers", "X-Requested-With");  
            res.header("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS"); //请求方式
            res.header("X-Powered-By", ' 3.2.1')
            res.header("Content-Type", "application/json;charset=utf-8");
            var data = {
                name: req.body.name + ' - server 3001 cors process',
                id: req.body.id + ' - server 3001 cors process'    
            }    
            console.log(data)    
            res.send(data)    
            res.end()
        })  
2.简述同步和异步的区别
    （1）同步是阻塞模式，异步是非阻塞模式。
    （2）同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；
    （3）异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。
3.一次完整的HTTP事务是怎样的一个过程,基本流程：
    a. 域名解析
    b. 发起TCP的3次握手
    c. 建立TCP连接后发起http请求
    d. 服务器端响应http请求，浏览器得到html代码
    e. 浏览器解析html代码，并请求html代码中的资源
    f. 浏览器对页面进行渲染呈现给用户
4.TCP的三次握手
    （1）第一次握手：客户端发送syn包(seq=x)到服务器，并进入SYN_SEND(网络请求)状态，等待服务器确认
    （2）第二次握手：服务器收到syn包，必须确认客户的SYN(ack=x+1)，同时自己也发送一个SYN包(seq=y)，即SYN+ACK包，此时服务器进入SYN_RECV状态
    （3）第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手

6.浏览器存储方法及其优缺点
    （1） cookie    
        h5之前，存储主要用cookies，缺点是在请求头上带着数据，导致流量增加。大小限制4k
    （2）localStorage 
        以键值对(Key-Value)的方式存储，永久存储，永不失效，除非手动删除。IE8+支持，每个域名限制5M
    （3）sessionStorage
        sessionStorage操作的方法与localStroage是一样的，区别在于 sessionStorage 在关闭页面后即被清空，而 localStorage 则会一直保存。
        很多时候数据只需要在用户浏览一组页面期间使用，关闭窗口后数据就可以丢弃了，这种情况使用sessionStorage就比较方便
    （4）cookie、localStorage、sessionStorage之间的区别
        ① 存储大小限制不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。
        sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大
        ② 数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；
        cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭
         ③作用域不同，sessionStorage不在不同的浏览器页面中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的
        Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者

10.this的指向问题
    es5：谁调用的，指向谁， (fn)();this ->window
            var x = 1;
            var obj = {
                x: 0,
                f1: function () {  console.log(this.x);  }
            }
            var f1 = obj.f1;
            obj.f1(); //0
            f1(); //1   window.f1()
    es6：指向是固定的,（ 只会从自己的作用域链的上一层继承this ，并始终指向fn 定义生效时所在的对象）
        var x=2;
        var obj={
            x:1,
            fn:()=>{console.log(this.x)}
        }
        window.obj.fn()
    jq:指向的是jq对象
        //$(document).ready(function(){
        $(function(){  
            console.log(this);       //this    document 文档 
            console.log($(this));   //$(this)  document 节点
            console.log($);         //$        jq对象
        })
9. call  apply bind  https://www.cnblogs.com/pssp/p/5215621.html
    b.call(a,1,2);
    b.apply(a,[10,1])
    c = b.bind(a)           //bind方法返回的是一个修改过后的函数 需要调用下c();
    
10.继承的方式 https://blog.csdn.net/weixin_45601248/article/details/120003780?utm_medium=distribute.wap_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-120003780-blog-120496411.wap_relevant_multi_platform_whitelistv1&spm=1001.2101.3001.4242.1&utm_relevant_index=1

11.闭包问题
    特点： 让外部访问函数内部变量成为可能；   局部变量会常驻在内存中；     可以避免使用全局变量，防止全局变量污染；   会造成内存泄漏（有一块内存空间被长期占用，而不被释放）
    https://blog.csdn.net/weixin_43586120/article/details/89456183?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164177496016780264011266%2522%252C%252
    2scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164177496016780264011266&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~to
    p_positive~default-1-89456183.first_rank_v2_pc_rank_v29&utm_term=%E9%97%AD%E5%8C%85&spm=1018.2226.3001.4187
    闭包问题及解决方法：
    释放内存变量：将内存变量设置为null
11.获取元素的高度 
  el.offsetHeight        el.clientHeight          window.getComputedStyle('#id').getPropertyValue('height') 
12.js常用的浏览器对象BOM（Browser  Object Model）
    navigator：含有正在使用的Navigator的名称、版本属性，客户端支持的MIME类型属性，客户端安装的"插件"类型。
    window：最高等级的对象，拥有整个窗口的属性;在每一个Frame中的"子窗口"也有相应的window对象。开:window.open() 关:window.close()
    document：包含基于文档内容的属性，如title、backgroundcolor、links和form等。
    location：含有基于当前的URL的属性。 location.href       location.pathname 
    history：包含客户机先前已经请求过的URL。
13.浏览器是如何实现定时器
    setTimeout("alert('定时器!')",0);  alert("测试")
    代码解释：主线程的代码执行完后，在执行定时器的异步线程  ，最执行其他的线程；
    浏览器的多线程（JS引擎线程、界面渲染线程、事件触发线程、http请求线程）
14.setTimeout(fn,[time],[参数])
    延迟的毫秒数 (一秒等于 1000 毫秒)，函数的调用会在该延迟之后发生。如果省略该参数，time 取默认值 0，意味着“马上”执行，或者尽快执行。
    不管是哪种情况，实际的延迟时间可能会比期待的 (time 毫秒数) 值长，因为实际延时比设定值更久的原因：最小延迟时间 >=4ms
   推荐：setTimeout(fn,[time],[参数])
   不推荐：window.setTimeout("alert(\"Hello World!\");", 500);

